{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\deryx\\\\simon-react\\\\src\\\\components\\\\control-panel\\\\control-panel.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport NamePlate from '../name-plate/name-plate';\nimport OnOffSwitch from '../on-off-switch/on-off-switch';\nimport StartButton from '../start-button/start-button';\nimport StrictButton from '../strict-button/strict-button';\nimport './styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst simonButtons = [{\n  color: \"#008000\",\n  sound: \"https://s3.amazonaws.com/freecodecamp/simonSound1.mp3\"\n}, {\n  color: \"#FF0000\",\n  sound: \"https://s3.amazonaws.com/freecodecamp/simonSound2.mp3\"\n}, {\n  color: \"#F5AB35\",\n  sound: \"https://s3.amazonaws.com/freecodecamp/simonSound4.mp3\"\n}, {\n  color: \"#0000FF\",\n  sound: \"https://s3.amazonaws.com/freecodecamp/simonSound3.mp3\"\n}];\nconst MAX_STEPS = 20;\nconst BLANK_COUNTER = '';\nconst ON_COUNTER = '--';\nconst WRONG_COUNTER = '! !';\nconst lightTime = 800;\n\nconst ControlPanel = props => {\n  _s();\n\n  const [playerPattern, setPlayerPattern] = useState([]);\n  const [simonPattern, setSimonPattern] = useState([]);\n  const [strictOn, setStrictOn] = useState(false);\n  const [simonOn, setSimonOn] = useState(false);\n  const [count, setCount] = useState(1);\n\n  const addPlayerButton = btn => {\n    let pattern;\n    pattern = [...playerPattern, btn];\n    setPlayerPattern(pattern);\n  };\n\n  const addSimonButton = () => {\n    let pattern;\n    const newButton = getRandomButton();\n    pattern = [...simonPattern, newButton];\n    setSimonPattern(pattern);\n  };\n\n  const emptySimonPattern = () => {\n    setSimonPattern([]);\n  };\n\n  const emptyPlayerPattern = () => {\n    setPlayerPattern([]);\n  };\n\n  const changeSimonOn = () => {\n    setSimonOn(!simonOn);\n  };\n\n  const changeStrictState = () => {\n    setStrictOn(!strictOn);\n  };\n\n  const increaseRound = () => {\n    setCount(count + 1);\n  };\n\n  const resetRound = () => {\n    setCount(1);\n  };\n\n  const showCurrentCount = currentCnt => {\n    const counterSpan = document.querySelector('.counter .count span');\n    const currentNumber = count >= 0 && count <= 9 ? \"0\" + count : count.toString();\n    counterSpan.innerText = typeof currentCnt === \"string\" ? currentCnt : currentNumber;\n  };\n\n  const resetGame = () => {\n    resetRound();\n    emptySimonPattern();\n    emptyPlayerPattern();\n  };\n\n  const handleSwitchAction = evt => {\n    const switchButton = document.querySelector('.case > .switch');\n    const indicator = document.querySelector('.strict > .indicator');\n    evt.preventDefault();\n    changeSimonOn();\n\n    if (!!!simonOn) {\n      switchButton.style.float = 'left';\n      showCurrentCount(BLANK_COUNTER);\n\n      if (strictOn) {\n        setStrictOn(!strictOn);\n        indicator.style.background = \"red\";\n      }\n\n      resetGame();\n    } else {\n      switchButton.style.float = 'right';\n      showCurrentCount(ON_COUNTER);\n    }\n  };\n\n  const handleStrictAction = evt => {\n    const indicator = document.querySelector('.strict > .indicator');\n    evt.preventDefault();\n    changeStrictState();\n    indicator.style.background = strictOn ? 'green' : 'red';\n  };\n\n  const handleStartAction = evt => {\n    evt.preventDefault();\n\n    if (simonOn) {\n      playGame();\n    }\n  };\n\n  const arraysIdentical = (arr1, arr2) => {\n    const array1length = arr1.length;\n\n    if (arr1.length !== arr2.length) {\n      return false;\n    }\n\n    for (let i = 0; i < array1length; i++) {\n      if (arr1[i] !== arr2[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  const playRound = () => {\n    playSimonPattern();\n    getPlayerPattern();\n    increaseRound();\n    setTimeout(() => {\n      if (!arraysIdentical(simonPattern, playerPattern)) {\n        setTimeout(() => {\n          showCurrentCount(WRONG_COUNTER);\n        }, 100);\n\n        if (strictOn) {\n          resetGame();\n        }\n      }\n\n      emptyPlayerPattern();\n      showCurrentCount(count);\n      return playGame();\n    }, count * lightTime * 2);\n  };\n\n  const playSimonPattern = () => {\n    const simonLength = simonPattern.length;\n\n    for (let i = 0; i < simonLength; i++) {\n      (() => {\n        setTimeout(() => {\n          const button = simonPattern[i];\n          lightSimonButton(button);\n        }, i * lightTime);\n      })();\n    }\n  };\n\n  const getPlayerPattern = () => {\n    setTimeout(() => {\n      getSimonButton();\n    }, count * lightTime);\n  };\n\n  const getSimonButton = () => {\n    const greenButton = document.querySelector('.green-button');\n    const redButton = document.querySelector('.red-button');\n    const blueButton = document.querySelector('.blue-button');\n    const yellowButton = document.querySelector('.yellow-button');\n\n    greenButton.onclick = event => {\n      processPlayerClick(event);\n    };\n\n    redButton.onclick = event => {\n      processPlayerClick(event);\n    };\n\n    blueButton.onclick = event => {\n      processPlayerClick(event);\n    };\n\n    yellowButton.onclick = event => {\n      processPlayerClick(event);\n    };\n  };\n\n  const processPlayerClick = event => {\n    event = event || window.event;\n    const target = event.target || event.srcElement;\n    addPlayerSelection(parseInt(target.id, 10));\n  };\n\n  const addPlayerSelection = id => {\n    addPlayerButton(id);\n    lightSimonButton(id);\n  };\n\n  const getRandomButton = () => {\n    return Math.floor(Math.random() * 4);\n  };\n\n  const lightSimonButton = btn => {\n    let originalColor = simonButtons[btn].color;\n    const lightColor = lightenDarkenColor(originalColor, 90);\n    const button = document.getElementById(btn.toString());\n    button.style.backgroundColor = lightColor;\n    playSound(btn);\n    setTimeout(() => button.style.background = originalColor, lightTime / 2);\n    originalColor = '';\n  };\n\n  const lightenDarkenColor = (col, amt) => {\n    let usePound = false;\n\n    if (col[0] === \"#\") {\n      col = col.slice(1);\n      usePound = true;\n    }\n\n    const num = parseInt(col, 16);\n    /* tslint:disable:no-bitwise */\n\n    let r = (num >> 16) + amt;\n\n    if (r > 255) {\n      r = 255;\n    } else if (r < 0) {\n      r = 0;\n    }\n\n    let b = (num >> 8 & 0x00FF) + amt;\n\n    if (b > 255) {\n      b = 255;\n    } else if (b < 0) {\n      b = 0;\n    }\n\n    let g = (num & 0x0000FF) + amt;\n\n    if (g > 255) {\n      g = 255;\n    } else if (g < 0) {\n      g = 0;\n    }\n\n    return (usePound ? \"#\" : \"\") + (g | b << 8 | r << 16).toString(16);\n    /* tslint:enable:no-bitwise */\n  };\n\n  const playSound = btn => {\n    const sound = simonButtons[btn].sound;\n    const button = document.querySelector(\"div[id='\" + btn + \"'] audio\");\n    button.innerHTML = \"<source src='\" + sound + \"'>\";\n    button.play();\n  };\n\n  const playGame = () => {\n    showCurrentCount(ON_COUNTER);\n\n    while (count < MAX_STEPS) {\n      addSimonButton();\n      playRound();\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"controls\",\n    children: [/*#__PURE__*/_jsxDEV(NamePlate, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"counter\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"count\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            children: BLANK_COUNTER\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 272,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"count\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(StartButton, {\n        startAction: handleStartAction\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(StrictButton, {\n        strictAction: handleStrictAction\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(OnOffSwitch, {\n      switchAction: handleSwitchAction\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 267,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ControlPanel, \"JWEw+zR8YoNXvknP/kj0E3dokAs=\");\n\n_c = ControlPanel;\nexport default ControlPanel;\n\nvar _c;\n\n$RefreshReg$(_c, \"ControlPanel\");","map":{"version":3,"sources":["C:/Users/deryx/simon-react/src/components/control-panel/control-panel.tsx"],"names":["React","useState","NamePlate","OnOffSwitch","StartButton","StrictButton","simonButtons","color","sound","MAX_STEPS","BLANK_COUNTER","ON_COUNTER","WRONG_COUNTER","lightTime","ControlPanel","props","playerPattern","setPlayerPattern","simonPattern","setSimonPattern","strictOn","setStrictOn","simonOn","setSimonOn","count","setCount","addPlayerButton","btn","pattern","addSimonButton","newButton","getRandomButton","emptySimonPattern","emptyPlayerPattern","changeSimonOn","changeStrictState","increaseRound","resetRound","showCurrentCount","currentCnt","counterSpan","document","querySelector","currentNumber","toString","innerText","resetGame","handleSwitchAction","evt","switchButton","indicator","preventDefault","style","float","background","handleStrictAction","handleStartAction","playGame","arraysIdentical","arr1","arr2","array1length","length","i","playRound","playSimonPattern","getPlayerPattern","setTimeout","simonLength","button","lightSimonButton","getSimonButton","greenButton","redButton","blueButton","yellowButton","onclick","event","processPlayerClick","window","target","srcElement","addPlayerSelection","parseInt","id","Math","floor","random","originalColor","lightColor","lightenDarkenColor","getElementById","backgroundColor","playSound","col","amt","usePound","slice","num","r","b","g","innerHTML","play"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport NamePlate from '../name-plate/name-plate';\r\nimport OnOffSwitch from '../on-off-switch/on-off-switch';\r\nimport StartButton from '../start-button/start-button';\r\nimport StrictButton from '../strict-button/strict-button';\r\nimport './styles.css';\r\n\r\nconst simonButtons: any = [\r\n    {color: \"#008000\", sound: \"https://s3.amazonaws.com/freecodecamp/simonSound1.mp3\"},\r\n    {color: \"#FF0000\", sound: \"https://s3.amazonaws.com/freecodecamp/simonSound2.mp3\"},\r\n    {color: \"#F5AB35\", sound: \"https://s3.amazonaws.com/freecodecamp/simonSound4.mp3\"},\r\n    {color: \"#0000FF\", sound: \"https://s3.amazonaws.com/freecodecamp/simonSound3.mp3\"}\r\n];\r\n\r\nconst MAX_STEPS: number = 20;\r\nconst BLANK_COUNTER: string  = '';\r\nconst ON_COUNTER: string = '--';\r\nconst WRONG_COUNTER: string = '! !';\r\nconst lightTime: number = 800;\r\n\r\nconst ControlPanel = ( props: any ): any => {\r\n    const [playerPattern, setPlayerPattern] = useState( [] );\r\n    const [simonPattern, setSimonPattern] = useState( [] );\r\n    const [strictOn, setStrictOn] = useState( false );\r\n    const [simonOn, setSimonOn] = useState( false );\r\n    const [count, setCount] = useState( 1 );\r\n\t\r\n    const addPlayerButton = ( btn: number ): void => {\r\n        let pattern: any;\r\n        pattern = [...playerPattern, btn];\r\n        setPlayerPattern( pattern );\r\n    }\r\n\t\r\n    const addSimonButton = (): void => {\r\n        let pattern: any;\r\n        const newButton: number = getRandomButton();\r\n\r\n        pattern = [...simonPattern, newButton];\r\n        setSimonPattern( pattern );\r\n    }\r\n    \r\n    const emptySimonPattern = (): void => {\r\n\t    setSimonPattern( [] );    \r\n    }\r\n\t\r\n    const emptyPlayerPattern = (): void => {\r\n\t    setPlayerPattern( [] );    \r\n    }\r\n\r\n    const changeSimonOn = (): void => {\r\n        setSimonOn( !simonOn );\r\n    }\r\n\r\n    const changeStrictState = (): void => {\r\n        setStrictOn( !strictOn );\r\n    }\r\n\r\n    const increaseRound = (): void => {\r\n        setCount( count + 1 );\r\n    }\r\n\r\n    const resetRound = (): void => {\r\n        setCount( 1 );\r\n    }\r\n\r\n    const showCurrentCount = ( currentCnt: any ) => {\r\n        const counterSpan: any = document.querySelector( '.counter .count span' );\r\n        const currentNumber: string = count >= 0 && count <= 9 ? \"0\" + count : count.toString();\r\n        counterSpan.innerText = typeof currentCnt === \"string\" ? currentCnt : currentNumber;\r\n    }\r\n    \r\n    const resetGame = (): void => {\r\n        resetRound();\r\n        emptySimonPattern();\r\n        emptyPlayerPattern();\r\n    }\r\n\r\n    const handleSwitchAction = ( evt: any ) => {\r\n        const switchButton: any = document.querySelector( '.case > .switch' );\r\n        const indicator: any = document.querySelector( '.strict > .indicator' );\r\n        evt.preventDefault();\r\n        changeSimonOn();\r\n        if( !!!simonOn ) {\r\n            switchButton.style.float = 'left';\r\n\t        showCurrentCount( BLANK_COUNTER );\t\r\n            if( strictOn ) {\r\n                setStrictOn( !strictOn );\r\n                indicator.style.background = \"red\";\r\n            }\r\n            resetGame();\r\n        } else {\r\n            switchButton.style.float = 'right';\r\n\t        showCurrentCount( ON_COUNTER );\t\r\n        }\r\n    }\r\n\r\n    const handleStrictAction = ( evt: any ) => {\r\n        const indicator: any = document.querySelector( '.strict > .indicator' );\r\n        evt.preventDefault();\r\n        changeStrictState();\r\n        indicator.style.background = strictOn ? 'green' : 'red';\r\n    }\r\n\r\n    const handleStartAction = ( evt: any ) => {\r\n        evt.preventDefault();\r\n        if( simonOn ) {\r\n            playGame();\r\n        }\r\n    };\r\n\r\n    const arraysIdentical = ( arr1: number[], arr2: number[] ): boolean => {\r\n        const array1length = arr1.length;\r\n        if( arr1.length !== arr2.length ) {\r\n            return false;\r\n        }\r\n        for( let i = 0; i < array1length; i++ ) {\r\n            if( arr1[i] !== arr2[i] ) {\r\n                return false;\r\n            }\r\n        }\r\n    \r\n        return true;\r\n    }\r\n    \r\n    const playRound = (): void => {\r\n        playSimonPattern();\r\n        getPlayerPattern();\r\n        increaseRound();\r\n        setTimeout( () => {\r\n            if( !arraysIdentical( simonPattern, playerPattern ) ) {\r\n                setTimeout( () => {\r\n                    showCurrentCount( WRONG_COUNTER );\t\r\n                }, 100 );\r\n                if( strictOn ) {\r\n                    resetGame();\r\n                }\r\n            }\r\n\t        emptyPlayerPattern();\t\r\n            showCurrentCount( count );\t\t\t\r\n            return playGame();\r\n        }, count * lightTime * 2 );\r\n    }\r\n    \r\n    const playSimonPattern = (): void => {\r\n        const simonLength: number = simonPattern.length;\r\n\t    for (let i = 0; i < simonLength; i++) {\r\n            ( () => {\r\n                setTimeout( () => {\r\n                    const button = simonPattern[i];\r\n                    lightSimonButton( button );\r\n                }, i * lightTime);\r\n            })();\r\n\t    }\r\n    }\r\n    \r\n    const getPlayerPattern = (): void => {\r\n        setTimeout( () => {\r\n            getSimonButton();\t\r\n        }, count * lightTime);\r\n    }\r\n    \r\n    const getSimonButton = (): void => {\r\n        const greenButton: any = document.querySelector( '.green-button' );\r\n        const redButton: any = document.querySelector( '.red-button' );\r\n        const blueButton: any = document.querySelector( '.blue-button' );\r\n        const yellowButton: any = document.querySelector( '.yellow-button' );\r\n\r\n        greenButton.onclick = ( event: any ) => {\r\n            processPlayerClick( event );\r\n        }\r\n\r\n        redButton.onclick = ( event: any ) => {\r\n            processPlayerClick( event );\r\n        }\r\n\r\n        blueButton.onclick = ( event: any ) => {\r\n            processPlayerClick( event );\r\n        }\r\n\r\n        yellowButton.onclick = ( event: any ) => {\r\n            processPlayerClick( event );\r\n        }\r\n    }\r\n\t\r\n    const processPlayerClick = ( event: any ): void => {\r\n        event = event || window.event;\r\n        const target = event.target || event.srcElement;\r\n        addPlayerSelection( parseInt( target.id, 10 ) );\r\n    }\t    \r\n\r\n    const addPlayerSelection = ( id: number ): void => {\r\n\t    addPlayerButton( id );    \r\n        lightSimonButton( id );\r\n    }\r\n\r\n    const getRandomButton = (): number => {\r\n        return Math.floor( Math.random() * 4 );\r\n    }\r\n    \r\n    const lightSimonButton = ( btn: number ): any => {\r\n        let originalColor: any = simonButtons[ btn ].color;\r\n        const lightColor: any = lightenDarkenColor( originalColor, 90 );    \r\n        const button: any = document.getElementById( btn.toString() );\r\n    \r\n        button.style.backgroundColor = lightColor;\r\n    \r\n        playSound( btn );\r\n        setTimeout( () => button.style.background = originalColor, lightTime / 2 );\r\n        originalColor = '';\r\n    }\r\n    \r\n    const lightenDarkenColor = ( col: any, amt: number ): any => {\r\n        let usePound = false;\r\n    \r\n        if (col[0] === \"#\") {\r\n            col = col.slice(1);\r\n            usePound = true;\r\n        }\r\n    \r\n        const num: any = parseInt( col, 16 );\r\n        /* tslint:disable:no-bitwise */\r\n        let r = (num >> 16) + amt;\r\n    \r\n        if (r > 255) {\r\n            r = 255;\r\n        } else if (r < 0) {\r\n            r = 0;\r\n        }\r\n    \r\n        let b = ((num >> 8) & 0x00FF) + amt;\r\n    \r\n        if (b > 255) {\r\n            b = 255;\r\n        } else if (b < 0) {\r\n            b = 0;\r\n        }\r\n    \r\n        let g = (num & 0x0000FF) + amt;\r\n    \r\n        if (g > 255) {\r\n            g = 255;\r\n        } else if (g < 0) {\r\n            g = 0;\r\n        }\r\n    \r\n        return (usePound ? \"#\" : \"\") + (g | (b << 8) | (r << 16)).toString(16);\r\n        /* tslint:enable:no-bitwise */\r\n    }\r\n    \r\n    const playSound = ( btn: number ): void => {\r\n        const sound = simonButtons[ btn ].sound;    \r\n        const button: any = document.querySelector( \"div[id='\" + btn + \"'] audio\" );\r\n\r\n        button.innerHTML = \"<source src='\" + sound + \"'>\";\r\n        button.play();\r\n    }\r\n\r\n    const playGame = (): any => {\r\n        showCurrentCount( ON_COUNTER );\t\t\t\r\n        while( count < MAX_STEPS ) {\r\n            addSimonButton();\r\n            playRound();\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <div className=\"controls\">\r\n            <NamePlate />\r\n            <div className=\"row\">\r\n                <div className=\"counter\">\r\n                    <div className=\"count\">\r\n                        <span>{ BLANK_COUNTER }</span>\r\n                    </div>\r\n                    <p>count</p>\r\n                </div>\r\n                <StartButton startAction={ handleStartAction } />\r\n                <StrictButton strictAction={ handleStrictAction } />\r\n            </div>\r\n            <OnOffSwitch switchAction={ handleSwitchAction } />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ControlPanel;"]},"metadata":{},"sourceType":"module"}