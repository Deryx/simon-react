{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\deryx\\\\simon-react\\\\src\\\\components\\\\control-panel\\\\control-panel.tsx\";\nimport React from 'react';\nimport NamePlate from '../name-plate/name-plate';\nimport OnOffSwitch from '../on-off-switch/on-off-switch';\nimport StartButton from '../start-button/start-button';\nimport StrictButton from '../strict-button/strict-button';\nimport './styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst simonButtons = [{\n  color: \"#008000\",\n  sound: \"https://s3.amazonaws.com/freecodecamp/simonSound1.mp3\"\n}, {\n  color: \"#FF0000\",\n  sound: \"https://s3.amazonaws.com/freecodecamp/simonSound2.mp3\"\n}, {\n  color: \"#F5AB35\",\n  sound: \"https://s3.amazonaws.com/freecodecamp/simonSound4.mp3\"\n}, {\n  color: \"#0000FF\",\n  sound: \"https://s3.amazonaws.com/freecodecamp/simonSound3.mp3\"\n}];\nconst MAX_STEPS = 20;\nconst BLANK_COUNTER = '';\nconst ON_COUNTER = '--'; // const WRONG_COUNTER: string = '! !';\n\nconst lightTime = 800;\nlet simonOn = false;\nlet strictOn = false; // let playerPattern: any = [];\n\nlet simonPattern = [];\nlet count = 1;\n\nconst ControlPanel = props => {\n  const getRandomButton = () => {\n    return Math.floor(Math.random() * 4);\n  };\n\n  const addPlayerButton = btn => {\n    playerPattern = [...playerPattern, btn];\n  };\n\n  const addSimonButton = () => {\n    const newButton = getRandomButton();\n    simonPattern = [...simonPattern, newButton];\n  }; // const createSimonPattern = () => {\n  //     for( let i = 0; i < MAX_STEPS; i++ ) {\n  //         const newButton: number = getRandomButton();\n  //         simonPattern = [...simonPattern, newButton];\n  //     }\n  // }\n\n\n  const emptySimonPattern = () => {\n    simonPattern = [];\n  }; // const emptyPlayerPattern = (): void => {\n  //     playerPattern = [];    \n  // }\n\n\n  const increaseRound = () => {\n    count++;\n  };\n\n  const resetRound = () => {\n    count = 1;\n  };\n\n  const showCurrentCount = currentCnt => {\n    const counterSpan = document.querySelector('.counter .count span');\n    const currentNumber = count >= 0 && count <= 9 ? \"0\" + count : count.toString();\n    counterSpan.innerText = typeof currentCnt === \"string\" ? currentCnt : currentNumber;\n  };\n\n  const resetGame = () => {\n    resetRound();\n    emptySimonPattern(); // emptyPlayerPattern();\n  };\n\n  const handleSwitchAction = evt => {\n    const switchButton = document.querySelector('.case .switch');\n    const indicator = document.querySelector('.strict .indicator');\n    let switchPosition = switchButton.style.float;\n\n    if (switchPosition === 'left') {\n      switchButton.style.float = 'right';\n      showCurrentCount(ON_COUNTER);\n      indicator.style.background = \"red\";\n      simonOn = true;\n    } else {\n      switchButton.style.float = 'left';\n      showCurrentCount(BLANK_COUNTER);\n      resetGame();\n      simonOn = false;\n    }\n  };\n\n  const handleStrictAction = evt => {\n    const indicator = document.querySelector('.strict .indicator');\n    evt.preventDefault();\n    indicator.style.background = strictOn ? 'green' : 'red';\n    strictOn = !strictOn;\n  };\n\n  const handleStartAction = evt => {\n    if (simonOn) {\n      playGame();\n    } else {\n      showCurrentCount(BLANK_COUNTER);\n    }\n  }; // const arraysIdentical = ( arr1: number[], arr2: number[] ): boolean => {\n  //     if( arr1.length !== arr2.length ) {\n  //         return false;\n  //     }\n  //     for( let i = 0; i < count; i++ ) {\n  //         if( arr1[i] !== arr2[i] ) {\n  //             return false;\n  //         }\n  //     }\n  //     return true;\n  // }\n  // const playRound = (): void => {\n  //     addSimonButton();\n  //     playSimonPattern();\n  //     getPlayerPattern();\n  // setTimeout( () => {\n  //     if( simonOn && !arraysIdentical( simonPattern, playerPattern ) ) {\n  //         showCurrentCount( WRONG_COUNTER );\t\n  //         if( strictOn ) {\n  //             emptyPlayerPattern();\t\n  //             resetGame();\n  //         }\n  //     }\n  // }, count * lightTime * 2 );\n  // }\n\n\n  const playSimonPattern = round => {\n    for (let i = 0; i < round; i++) {\n      const button = simonPattern[i];\n\n      (i => {\n        setTimeout(() => {\n          lightSimonButton(button);\n        }, i * lightTime);\n      })(i);\n    }\n  };\n\n  const getPlayerPattern = () => {\n    setTimeout(() => {\n      for (var i = 0; i < simonPattern.length; i++) {\n        (function (i) {\n          setTimeout(function () {\n            getPlayerClick();\n          }, i * lightTime);\n        })(i);\n      }\n    }, 3500);\n  };\n\n  const getPlayerClick = () => {\n    const greenButton = document.querySelector('.green-button');\n    const redButton = document.querySelector('.red-button');\n    const blueButton = document.querySelector('.blue-button');\n    const yellowButton = document.querySelector('.yellow-button');\n\n    greenButton.onclick = event => {\n      event.preventDefault();\n      processPlayerClick(event);\n    };\n\n    redButton.onclick = event => {\n      event.preventDefault();\n      processPlayerClick(event);\n    };\n\n    blueButton.onclick = event => {\n      event.preventDefault();\n      processPlayerClick(event);\n    };\n\n    yellowButton.onclick = event => {\n      event.preventDefault();\n      processPlayerClick(event);\n    };\n  };\n\n  const processPlayerClick = event => {\n    event.preventDefault();\n    event = event || window.event;\n    const target = event.target || event.srcElement;\n    const newButton = target.id;\n    addPlayerSelection(newButton);\n  };\n\n  const addPlayerSelection = id => {\n    addPlayerButton(id);\n    lightSimonButton(id);\n  };\n\n  const lightSimonButton = btn => {\n    let originalColor = simonButtons[btn].color;\n    const lightColor = lightenDarkenColor(originalColor, 90);\n    const button = document.getElementById(btn.toString());\n    button.style.backgroundColor = lightColor;\n    playSound(btn);\n    setTimeout(() => button.style.background = originalColor, lightTime / 2);\n    originalColor = '';\n  };\n\n  const lightenDarkenColor = (col, amt) => {\n    let usePound = false;\n\n    if (col[0] === \"#\") {\n      col = col.slice(1);\n      usePound = true;\n    }\n\n    const num = parseInt(col, 16);\n    /* tslint:disable:no-bitwise */\n\n    let r = (num >> 16) + amt;\n\n    if (r > 255) {\n      r = 255;\n    } else if (r < 0) {\n      r = 0;\n    }\n\n    let b = (num >> 8 & 0x00FF) + amt;\n\n    if (b > 255) {\n      b = 255;\n    } else if (b < 0) {\n      b = 0;\n    }\n\n    let g = (num & 0x0000FF) + amt;\n\n    if (g > 255) {\n      g = 255;\n    } else if (g < 0) {\n      g = 0;\n    }\n\n    return (usePound ? \"#\" : \"\") + (g | b << 8 | r << 16).toString(16);\n    /* tslint:enable:no-bitwise */\n  };\n\n  const playSound = btn => {\n    const sound = simonButtons[btn].sound;\n    const button = document.querySelector(\"div[id='\" + btn + \"'] audio\");\n    button.innerHTML = \"<source src='\" + sound + \"'>\";\n    button.play();\n  };\n\n  const playGame = () => {\n    showCurrentCount(ON_COUNTER);\n\n    if (count < MAX_STEPS) {\n      addSimonButton();\n      console.log(simonPattern);\n      showCurrentCount(count);\n      playSimonPattern(count);\n      getPlayerPattern(); // if( arraysIdentical( simonPattern, playerPattern ) ) {\n      //     increaseRound();\n      //     playGame();\n      // } else {\n      //     showCurrentCount( WRONG_COUNTER );\t\n      //     console.log(strictOn);\n      //     if( strictOn ) {\n      //         emptyPlayerPattern();\t\n      //         resetGame();\n      //         console.log(simonPattern);\n      //     } \n      // }\n\n      increaseRound();\n      playGame();\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"controls\",\n    children: [/*#__PURE__*/_jsxDEV(NamePlate, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"counter\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"count\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            children: BLANK_COUNTER\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 296,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"count\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(StartButton, {\n        startAction: handleStartAction\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(StrictButton, {\n        strictAction: handleStrictAction\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(OnOffSwitch, {\n      switchAction: handleSwitchAction\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 291,\n    columnNumber: 9\n  }, this);\n};\n\n_c = ControlPanel;\nexport default ControlPanel;\n\nvar _c;\n\n$RefreshReg$(_c, \"ControlPanel\");","map":{"version":3,"sources":["C:/Users/deryx/simon-react/src/components/control-panel/control-panel.tsx"],"names":["React","NamePlate","OnOffSwitch","StartButton","StrictButton","simonButtons","color","sound","MAX_STEPS","BLANK_COUNTER","ON_COUNTER","lightTime","simonOn","strictOn","simonPattern","count","ControlPanel","props","getRandomButton","Math","floor","random","addPlayerButton","btn","playerPattern","addSimonButton","newButton","emptySimonPattern","increaseRound","resetRound","showCurrentCount","currentCnt","counterSpan","document","querySelector","currentNumber","toString","innerText","resetGame","handleSwitchAction","evt","switchButton","indicator","switchPosition","style","float","background","handleStrictAction","preventDefault","handleStartAction","playGame","playSimonPattern","round","i","button","setTimeout","lightSimonButton","getPlayerPattern","length","getPlayerClick","greenButton","redButton","blueButton","yellowButton","onclick","event","processPlayerClick","window","target","srcElement","id","addPlayerSelection","originalColor","lightColor","lightenDarkenColor","getElementById","backgroundColor","playSound","col","amt","usePound","slice","num","parseInt","r","b","g","innerHTML","play","console","log"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport NamePlate from '../name-plate/name-plate';\r\nimport OnOffSwitch from '../on-off-switch/on-off-switch';\r\nimport StartButton from '../start-button/start-button';\r\nimport StrictButton from '../strict-button/strict-button';\r\nimport './styles.css';\r\n\r\nconst simonButtons: any = [\r\n    {color: \"#008000\", sound: \"https://s3.amazonaws.com/freecodecamp/simonSound1.mp3\"},\r\n    {color: \"#FF0000\", sound: \"https://s3.amazonaws.com/freecodecamp/simonSound2.mp3\"},\r\n    {color: \"#F5AB35\", sound: \"https://s3.amazonaws.com/freecodecamp/simonSound4.mp3\"},\r\n    {color: \"#0000FF\", sound: \"https://s3.amazonaws.com/freecodecamp/simonSound3.mp3\"}\r\n];\r\n\r\nconst MAX_STEPS: number = 20;\r\nconst BLANK_COUNTER: string  = '';\r\nconst ON_COUNTER: string = '--';\r\n// const WRONG_COUNTER: string = '! !';\r\nconst lightTime: number = 800;\r\n\r\nlet simonOn: boolean = false;\r\nlet strictOn: boolean = false;\r\n// let playerPattern: any = [];\r\nlet simonPattern: any = [];\r\nlet count: number = 1;\r\n\r\n\r\nconst ControlPanel = ( props: any ): any => {\r\n    const getRandomButton = (): number => {\r\n        return Math.floor( Math.random() * 4 );\r\n    }\r\n\r\n    const addPlayerButton = ( btn: number ): void => {\r\n        playerPattern = [...playerPattern, btn];\r\n    }\r\n\r\n    const addSimonButton = (): void => {\r\n        const newButton: number = getRandomButton();\r\n\r\n        simonPattern = [...simonPattern, newButton];\r\n    }\r\n\r\n    // const createSimonPattern = () => {\r\n    //     for( let i = 0; i < MAX_STEPS; i++ ) {\r\n    //         const newButton: number = getRandomButton();\r\n    //         simonPattern = [...simonPattern, newButton];\r\n    //     }\r\n    // }\r\n    \r\n    const emptySimonPattern = (): void => {\r\n\t    simonPattern = [];    \r\n    }\r\n\t\r\n    // const emptyPlayerPattern = (): void => {\r\n\t//     playerPattern = [];    \r\n    // }\r\n\r\n    const increaseRound = (): void => {\r\n        count++;\r\n    }\r\n\r\n    const resetRound = (): void => {\r\n        count = 1;\r\n    }\r\n\r\n    const showCurrentCount = ( currentCnt: any ) => {\r\n        const counterSpan: any = document.querySelector( '.counter .count span' );\r\n        const currentNumber: string = count >= 0 && count <= 9 ? \"0\" + count : count.toString();\r\n        counterSpan.innerText = typeof currentCnt === \"string\" ? currentCnt : currentNumber;\r\n    }\r\n    \r\n    const resetGame = (): void => {\r\n        resetRound();\r\n        emptySimonPattern();\r\n        // emptyPlayerPattern();\r\n    }\r\n\r\n    const handleSwitchAction = ( evt: any ) => {\r\n        const switchButton: any = document.querySelector( '.case .switch' );\r\n        const indicator: any = document.querySelector( '.strict .indicator' );\r\n\r\n        let switchPosition: any = switchButton.style.float;\r\n\r\n        if( switchPosition === 'left' ) {\r\n            switchButton.style.float = 'right';\r\n\t        showCurrentCount( ON_COUNTER );\t\r\n            indicator.style.background = \"red\";\r\n            simonOn = true;\r\n        } else {\r\n            switchButton.style.float = 'left';\r\n\t        showCurrentCount( BLANK_COUNTER );\t\r\n            resetGame();\r\n            simonOn = false;\r\n        }\r\n    }\r\n\r\n    const handleStrictAction = ( evt: any ) => {\r\n        const indicator: any = document.querySelector( '.strict .indicator' );\r\n\r\n        evt.preventDefault();\r\n\r\n        indicator.style.background = strictOn ? 'green' : 'red';\r\n\r\n        strictOn = !strictOn;\r\n    }\r\n\r\n    const handleStartAction = ( evt: any ) => {\r\n        if( simonOn ) {\r\n            playGame();\r\n        } else {\r\n\t        showCurrentCount( BLANK_COUNTER );\t\r\n        }\r\n    };\r\n\r\n    // const arraysIdentical = ( arr1: number[], arr2: number[] ): boolean => {\r\n    //     if( arr1.length !== arr2.length ) {\r\n    //         return false;\r\n    //     }\r\n    //     for( let i = 0; i < count; i++ ) {\r\n    //         if( arr1[i] !== arr2[i] ) {\r\n    //             return false;\r\n    //         }\r\n    //     }\r\n    \r\n    //     return true;\r\n    // }\r\n    \r\n    // const playRound = (): void => {\r\n    //     addSimonButton();\r\n    //     playSimonPattern();\r\n    //     getPlayerPattern();\r\n        // setTimeout( () => {\r\n        //     if( simonOn && !arraysIdentical( simonPattern, playerPattern ) ) {\r\n        //         showCurrentCount( WRONG_COUNTER );\t\r\n        //         if( strictOn ) {\r\n        //             emptyPlayerPattern();\t\r\n        //             resetGame();\r\n        //         }\r\n        //     }\r\n        // }, count * lightTime * 2 );\r\n    // }\r\n    \r\n    const playSimonPattern = ( round: number ): void => {\r\n        for (let i = 0; i < round; i++) {\r\n            const button = simonPattern[i];\r\n            ( ( i ) => {\r\n                setTimeout( () => {\r\n                    lightSimonButton( button );\r\n                }, i * lightTime);\r\n            })( i );\r\n        }\r\n    }\r\n    \r\n    const getPlayerPattern = (): void => {\r\n        setTimeout( () => {\r\n            for (var i = 0; i < simonPattern.length; i++) {\r\n                (function(i) {\r\n                    setTimeout(function() {\r\n                        getPlayerClick();\r\n                    }, i * lightTime);\r\n                })(i);\r\n            }\r\n        }, 3500); \r\n    }\r\n    \r\n    const getPlayerClick = (): void => {\r\n        const greenButton: any = document.querySelector( '.green-button' );\r\n        const redButton: any = document.querySelector( '.red-button' );\r\n        const blueButton: any = document.querySelector( '.blue-button' );\r\n        const yellowButton: any = document.querySelector( '.yellow-button' );\r\n\r\n        greenButton.onclick = ( event: any ) => {\r\n            event.preventDefault();\r\n            processPlayerClick( event );\r\n        }\r\n\r\n        redButton.onclick = ( event: any ) => {\r\n            event.preventDefault();\r\n            processPlayerClick( event );\r\n        }\r\n\r\n        blueButton.onclick = ( event: any ) => {\r\n            event.preventDefault();\r\n            processPlayerClick( event );\r\n        }\r\n\r\n        yellowButton.onclick = ( event: any ) => {\r\n            event.preventDefault();\r\n            processPlayerClick( event );\r\n        }\r\n    }\r\n\t\r\n    const processPlayerClick = ( event: any ): void => {\r\n        event.preventDefault();\r\n\r\n        event = event || window.event;\r\n        const target = event.target || event.srcElement;\r\n        const newButton = target.id;\r\n        addPlayerSelection( newButton );\r\n    }\t    \r\n\r\n    const addPlayerSelection = ( id: number ): void => {\r\n\t    addPlayerButton( id );    \r\n        lightSimonButton( id );\r\n    }\r\n    \r\n    const lightSimonButton = ( btn: number ): any => {\r\n        let originalColor: any = simonButtons[ btn ].color;\r\n        const lightColor: any = lightenDarkenColor( originalColor, 90 );    \r\n        const button: any = document.getElementById( btn.toString() );\r\n    \r\n        button.style.backgroundColor = lightColor;\r\n    \r\n        playSound( btn );\r\n        setTimeout( () => button.style.background = originalColor, lightTime / 2 );\r\n        originalColor = '';\r\n    }\r\n    \r\n    const lightenDarkenColor = ( col: any, amt: number ): any => {\r\n        let usePound = false;\r\n    \r\n        if (col[0] === \"#\") {\r\n            col = col.slice(1);\r\n            usePound = true;\r\n        }\r\n    \r\n        const num: any = parseInt( col, 16 );\r\n        /* tslint:disable:no-bitwise */\r\n        let r = (num >> 16) + amt;\r\n    \r\n        if (r > 255) {\r\n            r = 255;\r\n        } else if (r < 0) {\r\n            r = 0;\r\n        }\r\n    \r\n        let b = ((num >> 8) & 0x00FF) + amt;\r\n    \r\n        if (b > 255) {\r\n            b = 255;\r\n        } else if (b < 0) {\r\n            b = 0;\r\n        }\r\n    \r\n        let g = (num & 0x0000FF) + amt;\r\n    \r\n        if (g > 255) {\r\n            g = 255;\r\n        } else if (g < 0) {\r\n            g = 0;\r\n        }\r\n    \r\n        return (usePound ? \"#\" : \"\") + (g | (b << 8) | (r << 16)).toString(16);\r\n        /* tslint:enable:no-bitwise */\r\n    }\r\n    \r\n    const playSound = ( btn: number ): void => {\r\n        const sound = simonButtons[ btn ].sound;    \r\n        const button: any = document.querySelector( \"div[id='\" + btn + \"'] audio\" );\r\n\r\n        button.innerHTML = \"<source src='\" + sound + \"'>\";\r\n        button.play();\r\n    }\r\n\r\n    const playGame = (): any => {\r\n        showCurrentCount( ON_COUNTER );\t\r\n        if( count < MAX_STEPS ) {\r\n            addSimonButton();\r\n            console.log(simonPattern);\r\n            showCurrentCount( count );\r\n            playSimonPattern( count );\r\n            getPlayerPattern();    \r\n            // if( arraysIdentical( simonPattern, playerPattern ) ) {\r\n            //     increaseRound();\r\n            //     playGame();\r\n            // } else {\r\n            //     showCurrentCount( WRONG_COUNTER );\t\r\n            //     console.log(strictOn);\r\n            //     if( strictOn ) {\r\n            //         emptyPlayerPattern();\t\r\n            //         resetGame();\r\n            //         console.log(simonPattern);\r\n            //     } \r\n            // }\r\n            increaseRound();\r\n            playGame();\r\n        }\t\r\n    }\r\n    \r\n    return (\r\n        <div className=\"controls\">\r\n            <NamePlate />\r\n            <div className=\"row\">\r\n                <div className=\"counter\">\r\n                    <div className=\"count\">\r\n                        <span>{ BLANK_COUNTER }</span>\r\n                    </div>\r\n                    <p>count</p>\r\n                </div>\r\n                <StartButton startAction={ handleStartAction } />\r\n                <StrictButton strictAction={ handleStrictAction } />\r\n            </div>\r\n            <OnOffSwitch switchAction={ handleSwitchAction } />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ControlPanel;"]},"metadata":{},"sourceType":"module"}