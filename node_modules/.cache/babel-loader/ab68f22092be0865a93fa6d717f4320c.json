{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\deryx\\\\simon-react\\\\src\\\\components\\\\control-panel\\\\control-panel.tsx\";\nimport React from 'react';\nimport NamePlate from '../name-plate/name-plate';\nimport OnOffSwitch from '../on-off-switch/on-off-switch';\nimport StartButton from '../start-button/start-button';\nimport StrictButton from '../strict-button/strict-button';\nimport './styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst simonButtons = {\n  1: {\n    color: \"#008000\",\n    sound: \"https://s3.amazonaws.com/freecodecamp/simonSound1.mp3\"\n  },\n  2: {\n    color: \"#FF0000\",\n    sound: \"https://s3.amazonaws.com/freecodecamp/simonSound2.mp3\"\n  },\n  3: {\n    color: \"#F5AB35\",\n    sound: \"https://s3.amazonaws.com/freecodecamp/simonSound4.mp3\"\n  },\n  4: {\n    color: \"#0000FF\",\n    sound: \"https://s3.amazonaws.com/freecodecamp/simonSound3.mp3\"\n  }\n};\nconst MAX_STEPS = 20;\nconst BLANK_COUNTER = '';\nconst ON_COUNTER = '--'; // const WRONG_COUNTER: string = '! !';\n\nconst lightTime = 800;\nlet simonOn = false;\nlet strictOn = false;\nlet playerPattern = {};\nlet simonPattern = {};\nlet count = 1;\n\nconst ControlPanel = () => {\n  const getRandomButton = () => {\n    return Math.floor(Math.random() * 4 + 1);\n  }; // const addPlayerButton = ( btn: number ): void => {\n  //     playerPattern = [...playerPattern, btn];\n  // }\n\n\n  const addSimonButton = () => {\n    simonPattern[count] = getRandomButton();\n  }; // const createSimonPattern = () => {\n  //     for( let i = 0; i < MAX_STEPS; i++ ) {\n  //         const newButton: number = getRandomButton();\n  //         simonPattern = [...simonPattern, newButton];\n  //     }\n  // }\n\n\n  const emptySimonPattern = () => {\n    simonPattern = {};\n  }; // const emptyPlayerPattern = (): void => {\n  //     playerPattern = [];    \n  // }\n  // const increaseRound = (): void => {\n  //     count++;\n  // }\n\n\n  const resetRound = () => {\n    count = 1;\n  };\n\n  const showCurrentCount = currentCnt => {\n    const counterSpan = document.querySelector('.counter .count span');\n    const currentNumber = count >= 0 && count <= 9 ? \"0\" + count : count.toString();\n    counterSpan.innerText = typeof currentCnt === \"string\" ? currentCnt : currentNumber;\n  };\n\n  const resetGame = () => {\n    resetRound();\n    emptySimonPattern(); // emptyPlayerPattern();\n  };\n\n  const handleSwitchAction = () => {\n    const switchButton = document.querySelector('.case .switch');\n    const indicator = document.querySelector('.strict .indicator');\n    let switchPosition = switchButton.style.float;\n\n    if (switchPosition === 'left') {\n      switchButton.style.float = 'right';\n      showCurrentCount(ON_COUNTER);\n      indicator.style.background = \"red\";\n      simonOn = true;\n    } else {\n      switchButton.style.float = 'left';\n      showCurrentCount(BLANK_COUNTER);\n      resetGame();\n      simonOn = false;\n    }\n  };\n\n  const handleStrictAction = evt => {\n    const indicator = document.querySelector('.strict .indicator');\n    evt.preventDefault();\n    indicator.style.background = strictOn ? 'green' : 'red';\n    strictOn = strictOn ? false : true;\n  };\n\n  const handleStartAction = () => {\n    if (simonOn) {\n      playGame();\n    } else {\n      showCurrentCount(BLANK_COUNTER);\n    }\n  }; // const arraysIdentical = ( arr1: number[], arr2: number[] ): boolean => {\n  //     if( arr1.length !== arr2.length ) {\n  //         return false;\n  //     }\n  //     for( let i = 0; i < count; i++ ) {\n  //         if( arr1[i] !== arr2[i] ) {\n  //             return false;\n  //         }\n  //     }\n  //     return true;\n  // }\n  // const playRound = (): void => {\n  //     addSimonButton();\n  //     playSimonPattern();\n  //     getPlayerPattern();\n  // setTimeout( () => {\n  //     if( simonOn && !arraysIdentical( simonPattern, playerPattern ) ) {\n  //         showCurrentCount( WRONG_COUNTER );\t\n  //         if( strictOn ) {\n  //             emptyPlayerPattern();\t\n  //             resetGame();\n  //         }\n  //     }\n  // }, count * lightTime * 2 );\n  // }\n\n\n  const playSimonPattern = round => {\n    if (round === 1) {\n      setTimeout(() => {\n        lightSimonButton(simonPattern[1]);\n      }, lightTime);\n    } else {\n      for (let i = 1; i <= round; i++) {\n        const button = simonPattern[i];\n        setTimeout(() => {\n          lightSimonButton(button);\n        }, i * lightTime);\n      }\n    }\n  }; // const getPlayerPattern = ( round: number ): void => {\n  //     let index: number = 1;\n  //     while( index <= round ) {\n  //         for( let i = 0; i < index; i++ ) {\n  //             let playerClick = 0;\n  //             setTimeout( () => {\n  //                 if( playerClick === 0 ) {\n  //                     playerClick = getPlayerClick();\n  //                 } else {\n  //                     clearTimeout();\n  //                 }\n  //             }, 5000 );\n  //         }\n  //         index++;\n  //     }     \n  // }\n\n\n  const getPlayerClick = index => {\n    const greenButton = document.querySelector('.green-button');\n    const redButton = document.querySelector('.red-button');\n    const blueButton = document.querySelector('.blue-button');\n    const yellowButton = document.querySelector('.yellow-button');\n\n    greenButton.onclick = event => {\n      processPlayerClick(event, index);\n    };\n\n    redButton.onclick = event => {\n      processPlayerClick(event, index);\n    };\n\n    blueButton.onclick = event => {\n      processPlayerClick(event, index);\n    };\n\n    yellowButton.onclick = event => {\n      processPlayerClick(event, index);\n    };\n  };\n\n  const processPlayerClick = (event, count) => {\n    event.preventDefault();\n    event = event || window.event;\n    const target = event.target || event.srcElement;\n    const playerClick = parseInt(target.id, 10);\n    playerPattern[count] = playerClick;\n    lightSimonButton(playerClick);\n  }; // const addPlayerSelection = ( id: number ): void => {\n  //     addPlayerButton( parseInt( id.toString() ) );    \n  //     lightSimonButton( id );\n  // }\n\n\n  const lightSimonButton = btn => {\n    let originalColor = simonButtons[btn].color;\n    const lightColor = lightenDarkenColor(originalColor, 90);\n    const button = document.getElementById(btn.toString());\n    button.style.backgroundColor = lightColor;\n    playSound(btn);\n    setTimeout(() => button.style.background = originalColor, lightTime / 2);\n    originalColor = '';\n  };\n\n  const lightenDarkenColor = (col, amt) => {\n    let usePound = false;\n\n    if (col[0] === \"#\") {\n      col = col.slice(1);\n      usePound = true;\n    }\n\n    const num = parseInt(col, 16);\n    /* tslint:disable:no-bitwise */\n\n    let r = (num >> 16) + amt;\n\n    if (r > 255) {\n      r = 255;\n    } else if (r < 0) {\n      r = 0;\n    }\n\n    let b = (num >> 8 & 0x00FF) + amt;\n\n    if (b > 255) {\n      b = 255;\n    } else if (b < 0) {\n      b = 0;\n    }\n\n    let g = (num & 0x0000FF) + amt;\n\n    if (g > 255) {\n      g = 255;\n    } else if (g < 0) {\n      g = 0;\n    }\n\n    return (usePound ? \"#\" : \"\") + (g | b << 8 | r << 16).toString(16);\n    /* tslint:enable:no-bitwise */\n  };\n\n  const playSound = btn => {\n    const sound = simonButtons[btn].sound;\n    const button = document.querySelector(\"div[id='\" + btn + \"'] audio\");\n    button.innerHTML = \"<source src='\" + sound + \"'>\";\n    button.play();\n  };\n\n  const playGame = () => {\n    if (count <= MAX_STEPS) {\n      addSimonButton();\n      showCurrentCount(count);\n      playSimonPattern(count);\n      getPlayerClick();\n      setTimeout(() => {\n        count++;\n        playGame();\n      }, count * 3000); // emptyPlayerPattern();\t\n      // getPlayerPattern();\n      // setTimeout( () => {\n      //     console.log('Simon:', simonPattern, 'Player:', playerPattern);\n      //     if( arraysIdentical( simonPattern, playerPattern ) ) {\n      //         increaseRound();\n      //     } else {\n      //         showCurrentCount( WRONG_COUNTER );\t\n      //         if( strictOn ) {\n      //             resetGame();\n      //         } \n      //     }\n      //     playGame();\n      // }, count * 2000 );  \n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"controls\",\n    children: [/*#__PURE__*/_jsxDEV(NamePlate, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 313,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"counter\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"count\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            children: BLANK_COUNTER\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 317,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"count\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 319,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(StartButton, {\n        startAction: handleStartAction\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(StrictButton, {\n        strictAction: handleStrictAction\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(OnOffSwitch, {\n      switchAction: handleSwitchAction\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 312,\n    columnNumber: 9\n  }, this);\n};\n\n_c = ControlPanel;\nexport default ControlPanel;\n\nvar _c;\n\n$RefreshReg$(_c, \"ControlPanel\");","map":{"version":3,"sources":["C:/Users/deryx/simon-react/src/components/control-panel/control-panel.tsx"],"names":["React","NamePlate","OnOffSwitch","StartButton","StrictButton","simonButtons","color","sound","MAX_STEPS","BLANK_COUNTER","ON_COUNTER","lightTime","simonOn","strictOn","playerPattern","simonPattern","count","ControlPanel","getRandomButton","Math","floor","random","addSimonButton","emptySimonPattern","resetRound","showCurrentCount","currentCnt","counterSpan","document","querySelector","currentNumber","toString","innerText","resetGame","handleSwitchAction","switchButton","indicator","switchPosition","style","float","background","handleStrictAction","evt","preventDefault","handleStartAction","playGame","playSimonPattern","round","setTimeout","lightSimonButton","i","button","getPlayerClick","index","greenButton","redButton","blueButton","yellowButton","onclick","event","processPlayerClick","window","target","srcElement","playerClick","parseInt","id","btn","originalColor","lightColor","lightenDarkenColor","getElementById","backgroundColor","playSound","col","amt","usePound","slice","num","r","b","g","innerHTML","play"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport NamePlate from '../name-plate/name-plate';\r\nimport OnOffSwitch from '../on-off-switch/on-off-switch';\r\nimport StartButton from '../start-button/start-button';\r\nimport StrictButton from '../strict-button/strict-button';\r\nimport './styles.css';\r\n\r\nconst simonButtons: any = {\r\n    1: {\r\n        color: \"#008000\", \r\n        sound: \"https://s3.amazonaws.com/freecodecamp/simonSound1.mp3\"\r\n        },\r\n    2: {\r\n        color: \"#FF0000\", \r\n        sound: \"https://s3.amazonaws.com/freecodecamp/simonSound2.mp3\"\r\n        },\r\n    3: {\r\n        color: \"#F5AB35\", \r\n        sound: \"https://s3.amazonaws.com/freecodecamp/simonSound4.mp3\"\r\n        },\r\n    4: {\r\n        color: \"#0000FF\", \r\n        sound: \"https://s3.amazonaws.com/freecodecamp/simonSound3.mp3\"\r\n        }\r\n};\r\n\r\nconst MAX_STEPS: number = 20;\r\nconst BLANK_COUNTER: string  = '';\r\nconst ON_COUNTER: string = '--';\r\n// const WRONG_COUNTER: string = '! !';\r\nconst lightTime: number = 800;\r\n\r\nlet simonOn: boolean = false;\r\nlet strictOn: boolean = false;\r\nlet playerPattern: any = {};\r\nlet simonPattern: any = {};\r\nlet count: number = 1;\r\n\r\n\r\nconst ControlPanel = (): any => {\r\n    const getRandomButton = (): number => {\r\n        return Math.floor( Math.random() * 4 + 1 );\r\n    }\r\n\r\n    // const addPlayerButton = ( btn: number ): void => {\r\n    //     playerPattern = [...playerPattern, btn];\r\n    // }\r\n\r\n    const addSimonButton = (): void => {\r\n        simonPattern[count] = getRandomButton();\r\n    }\r\n\r\n    // const createSimonPattern = () => {\r\n    //     for( let i = 0; i < MAX_STEPS; i++ ) {\r\n    //         const newButton: number = getRandomButton();\r\n    //         simonPattern = [...simonPattern, newButton];\r\n    //     }\r\n    // }\r\n    \r\n    const emptySimonPattern = (): void => {\r\n        simonPattern = {};    \r\n    }\r\n\t\r\n    // const emptyPlayerPattern = (): void => {\r\n\t//     playerPattern = [];    \r\n    // }\r\n\r\n    // const increaseRound = (): void => {\r\n    //     count++;\r\n    // }\r\n\r\n    const resetRound = (): void => {\r\n        count = 1;\r\n    }\r\n\r\n    const showCurrentCount = ( currentCnt: any ) => {\r\n        const counterSpan: any = document.querySelector( '.counter .count span' );\r\n        const currentNumber: string = count >= 0 && count <= 9 ? \"0\" + count : count.toString();\r\n        counterSpan.innerText = typeof currentCnt === \"string\" ? currentCnt : currentNumber;\r\n    }\r\n    \r\n    const resetGame = (): void => {\r\n        resetRound();\r\n        emptySimonPattern();\r\n        // emptyPlayerPattern();\r\n    }\r\n\r\n    const handleSwitchAction = () => {\r\n        const switchButton: any = document.querySelector( '.case .switch' );\r\n        const indicator: any = document.querySelector( '.strict .indicator' );\r\n\r\n        let switchPosition: any = switchButton.style.float;\r\n\r\n        if( switchPosition === 'left' ) {\r\n            switchButton.style.float = 'right';\r\n            showCurrentCount( ON_COUNTER );\t\r\n            indicator.style.background = \"red\";\r\n            simonOn = true;\r\n        } else {\r\n            switchButton.style.float = 'left';\r\n            showCurrentCount( BLANK_COUNTER );\t\r\n            resetGame();\r\n            simonOn = false;\r\n        }\r\n    }\r\n\r\n    const handleStrictAction = ( evt: any ) => {\r\n        const indicator: any = document.querySelector( '.strict .indicator' );\r\n\r\n        evt.preventDefault();\r\n\r\n        indicator.style.background = strictOn ? 'green' : 'red';\r\n\r\n        strictOn = strictOn ? false : true;\r\n    }\r\n\r\n    const handleStartAction = () => {\r\n        if( simonOn ) {\r\n            playGame();\r\n        } else {\r\n            showCurrentCount(BLANK_COUNTER);\t\r\n        }\r\n    };\r\n\r\n    // const arraysIdentical = ( arr1: number[], arr2: number[] ): boolean => {\r\n    //     if( arr1.length !== arr2.length ) {\r\n    //         return false;\r\n    //     }\r\n    //     for( let i = 0; i < count; i++ ) {\r\n    //         if( arr1[i] !== arr2[i] ) {\r\n    //             return false;\r\n    //         }\r\n    //     }\r\n    \r\n    //     return true;\r\n    // }\r\n    \r\n    // const playRound = (): void => {\r\n    //     addSimonButton();\r\n    //     playSimonPattern();\r\n    //     getPlayerPattern();\r\n        // setTimeout( () => {\r\n        //     if( simonOn && !arraysIdentical( simonPattern, playerPattern ) ) {\r\n        //         showCurrentCount( WRONG_COUNTER );\t\r\n        //         if( strictOn ) {\r\n        //             emptyPlayerPattern();\t\r\n        //             resetGame();\r\n        //         }\r\n        //     }\r\n        // }, count * lightTime * 2 );\r\n    // }\r\n    \r\n    const playSimonPattern = ( round: number ): void => {\r\n        if( round === 1 ) {\r\n            setTimeout( () => {\r\n                lightSimonButton( simonPattern[1] );\r\n            }, lightTime );\r\n        } else {\r\n            for (let i = 1; i <= round; i++) {\r\n                const button = simonPattern[i];\r\n                setTimeout( () => {\r\n                    lightSimonButton( button );\r\n                }, i * lightTime);\r\n            }\r\n        }\r\n    }\r\n    \r\n    // const getPlayerPattern = ( round: number ): void => {\r\n    //     let index: number = 1;\r\n\r\n    //     while( index <= round ) {\r\n    //         for( let i = 0; i < index; i++ ) {\r\n    //             let playerClick = 0;\r\n    //             setTimeout( () => {\r\n    //                 if( playerClick === 0 ) {\r\n    //                     playerClick = getPlayerClick();\r\n    //                 } else {\r\n    //                     clearTimeout();\r\n    //                 }\r\n    //             }, 5000 );\r\n    //         }\r\n\r\n    //         index++;\r\n    //     }     \r\n    // }\r\n    \r\n    const getPlayerClick = ( index: number ): void => {\r\n        const greenButton: any = document.querySelector( '.green-button' );\r\n        const redButton: any = document.querySelector( '.red-button' );\r\n        const blueButton: any = document.querySelector( '.blue-button' );\r\n        const yellowButton: any = document.querySelector( '.yellow-button' );\r\n        \r\n        greenButton.onclick = ( event: any ) => {\r\n            processPlayerClick( event, index );\r\n        }\r\n\r\n        redButton.onclick = ( event: any ) => {\r\n            processPlayerClick( event, index );\r\n        }\r\n\r\n        blueButton.onclick = ( event: any ) => {\r\n            processPlayerClick( event, index );\r\n        }\r\n\r\n        yellowButton.onclick = ( event: any ) => {\r\n            processPlayerClick( event, index );\r\n        }\r\n    }\r\n\t\r\n    const processPlayerClick = ( event: any, count: number ): void => {\r\n        event.preventDefault();\r\n\r\n        event = event || window.event;\r\n        const target = event.target || event.srcElement;\r\n\r\n        const playerClick = parseInt( target.id, 10 );\r\n        playerPattern[count] = playerClick;\r\n        lightSimonButton( playerClick );\r\n    }\t    \r\n\r\n    // const addPlayerSelection = ( id: number ): void => {\r\n\t//     addPlayerButton( parseInt( id.toString() ) );    \r\n    //     lightSimonButton( id );\r\n    // }\r\n    \r\n    const lightSimonButton = ( btn: number ): any => {\r\n        let originalColor: any = simonButtons[ btn ].color;\r\n        const lightColor: any = lightenDarkenColor( originalColor, 90 );    \r\n        const button: any = document.getElementById( btn.toString() );\r\n    \r\n        button.style.backgroundColor = lightColor;\r\n    \r\n        playSound( btn );\r\n        setTimeout( () => button.style.background = originalColor, lightTime / 2 );\r\n        originalColor = '';\r\n    }\r\n    \r\n    const lightenDarkenColor = ( col: any, amt: number ): any => {\r\n        let usePound = false;\r\n    \r\n        if (col[0] === \"#\") {\r\n            col = col.slice(1);\r\n            usePound = true;\r\n        }\r\n    \r\n        const num: any = parseInt( col, 16 );\r\n        /* tslint:disable:no-bitwise */\r\n        let r = (num >> 16) + amt;\r\n    \r\n        if (r > 255) {\r\n            r = 255;\r\n        } else if (r < 0) {\r\n            r = 0;\r\n        }\r\n    \r\n        let b = ((num >> 8) & 0x00FF) + amt;\r\n    \r\n        if (b > 255) {\r\n            b = 255;\r\n        } else if (b < 0) {\r\n            b = 0;\r\n        }\r\n    \r\n        let g = (num & 0x0000FF) + amt;\r\n    \r\n        if (g > 255) {\r\n            g = 255;\r\n        } else if (g < 0) {\r\n            g = 0;\r\n        }\r\n    \r\n        return (usePound ? \"#\" : \"\") + (g | (b << 8) | (r << 16)).toString(16);\r\n        /* tslint:enable:no-bitwise */\r\n    }\r\n    \r\n    const playSound = ( btn: number ): void => {\r\n        const sound = simonButtons[ btn ].sound;    \r\n        const button: any = document.querySelector( \"div[id='\" + btn + \"'] audio\" );\r\n\r\n        button.innerHTML = \"<source src='\" + sound + \"'>\";\r\n        button.play();\r\n    }\r\n\r\n    const playGame = (): any => {\r\n        if( count <= MAX_STEPS ) {\r\n            addSimonButton();\r\n            showCurrentCount( count );\r\n            playSimonPattern( count );\r\n            getPlayerClick();\r\n            setTimeout( () => {\r\n                count++; \r\n                playGame();\r\n            }, count * 3000 );\r\n            // emptyPlayerPattern();\t\r\n            // getPlayerPattern();\r\n            // setTimeout( () => {\r\n            //     console.log('Simon:', simonPattern, 'Player:', playerPattern);\r\n            //     if( arraysIdentical( simonPattern, playerPattern ) ) {\r\n            //         increaseRound();\r\n            //     } else {\r\n            //         showCurrentCount( WRONG_COUNTER );\t\r\n            //         if( strictOn ) {\r\n            //             resetGame();\r\n            //         } \r\n            //     }\r\n            //     playGame();\r\n            // }, count * 2000 );  \r\n        }\t\r\n    }\r\n    \r\n    return (\r\n        <div className=\"controls\">\r\n            <NamePlate />\r\n            <div className=\"row\">\r\n                <div className=\"counter\">\r\n                    <div className=\"count\">\r\n                        <span>{ BLANK_COUNTER }</span>\r\n                    </div>\r\n                    <p>count</p>\r\n                </div>\r\n                <StartButton startAction={ handleStartAction } />\r\n                <StrictButton strictAction={ handleStrictAction } />\r\n            </div>\r\n            <OnOffSwitch switchAction={ handleSwitchAction } />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ControlPanel;"]},"metadata":{},"sourceType":"module"}